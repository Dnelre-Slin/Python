# -*- coding: utf-8 -*-
"""
Created on Sun Sep 23 12:57:09 2018

@author: nilsh
"""

def sbox(n):
    x,y = divmod(n, 16)
    s = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76] ,
         [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0] ,
         [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15] ,
         [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75] ,
         [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84] ,
         [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf] ,
         [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8] ,
         [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2] ,
         [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73] ,
         [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb] ,
         [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79] ,
         [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08] ,
         [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a] ,
         [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e] ,
         [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf] ,
         [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]
    return s[x][y]

def getRconN(N):
    ans = 1
    for i in range(1, N):
        ans = ans*2 if ans*2 <= 0x80 else ans*2 ^ 0x11b
    return ans

def getRconMat():
    rconMat = []
    
    for i in range(1, 11):
        rconCol = []
        rconCol.append(getRconN(i))
        for j in range(3):
            rconCol.append(0)
        rconMat.append(rconCol)
    
    return rconMat

def rotWord(col):
    col[0],col[1],col[2],col[3] = col[1],col[2],col[3],col[0]
    
def subWord(col):
    for i in range(len(col)):
        col[i] = sbox(col[i])
        
def doXor(col, orgCol, rconCol):
    for i in range(len(col)):
        col[i] = col[i] ^ orgCol[i] ^ rconCol[i]
        
def getFirstCol(col, firstCol, rconCol):
    newCol = col[:]
    rotWord(newCol)
    subWord(newCol)
    doXor(newCol, firstCol, rconCol)
    return newCol
   
    
def colXor(col1, col2):
    xoredCol = []
    for i in range(len(col1)):
        xoredCol.append(col1[i] ^ col2[i])
    return xoredCol

def createKeys(key):
    RconMat = getRconMat()
    
    cipherKey = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
    for i in range(len(key)):
        x,y = divmod(i, 4)
        cipherKey[x][y] = ord(key[i])
      
    fullKey = []
    fullKey.append(cipherKey)
    for i in range(10):
        nextKey = []
        nextKey.append(getFirstCol(fullKey[i][3], fullKey[i][0], RconMat[i]))
        for j in range(3):
            nextKey.append(colXor(fullKey[i][j+1], nextKey[j]))
        fullKey.append(nextKey)
        
    return fullKey

        

def subBytes(mat):
    for i in range(len(mat)):
        for j in range(len(mat[i])):
            mat[i][j] = sbox(mat[i][j])

def shiftRows(mat):
    for i in range(len(mat)):
        mat[i][0],mat[i][1],mat[i][2],mat[i][3] = mat[i][0-i],mat[i][1-i],mat[i][2-i],mat[i][3-i]
#        mat[0][0] = 99
#        print(mat)

def shiftRowsInv(mat):
    for i in range(len(mat)):
        mat[i][0],mat[i][1],mat[i][2],mat[i][3] = mat[i][(0+i)%4],mat[i][(1+i)%4],mat[i][(2+i)%4],mat[i][(3+i)%4]

def fieldMultiply(nr, mul):
    if mul == 1:
        return nr
    ans = (nr << 1) & 0xff
    if (0x80 & nr):
        ans ^= 0x1b
    if mul == 3:
        ans ^= nr
    return ans


def fieldAddCol(col, constMat):
    copyCol = col[:]
    for i in range(len(constMat)):
        ans = 0
        for j in range(len(copyCol)):
            ans ^= fieldMultiply(copyCol[j], constMat[i][j])
        col[i] = ans
#    print(col)

def mixColumns(mat):
    constVec = [2,3,1,1]
    constMat = []
    for i in range(4):
        constMat.append(constVec[:])
    shiftRows(constMat)
    
#    print(constMat)
    
    for j in range(len(mat[0])):
        col = []
        for i in range(len(mat)):
            col.append(mat[i][j])
        print(col)
        fieldAddCol(col, constMat)
        print(col,"\n")
        for i in range(len(mat)):
            mat[i][j] = col[i]
        

def AddRoundKey(mat, roundKey):
    for i in range(len(mat)):
        for j in range(len(mat[i])):
            mat[i][j] ^= roundKey[i][j]


key = "This is my s-key"
key2 = [[0x2b,0x7e,0x15,0x16],[0x28,0xae,0xd2,0xa6],[0xab,0xf7,0x15,0x88],[0x09,0xcf,0x4f,0x3c]]

key3 = ""

for i in key2:
    for j in i:
        key3 += chr(j)
        
#print(key3)

#fullKey = createKeys(key3)
#
#for i in fullKey:
#    for j in i:
#        for k in j:
#            print(hex(k), end=", ")
#        print("")
#    print("\n")
    
testMat = [[0xd4,0xe0,0xb8,0x1e],[0xbf,0xb4,0x41,0x27],[0x5d,0x52,0x11,0x98],[0x30,0xae,0xf1,0xe5]]

mixColumns(testMat)

for i in testMat:
    for j in i:
        print(hex(j), end=" ,")
    print("")

#shiftRows(testMat)
#print(testMat)

#for c in key:
#    print(hex(ord(c)))

#print(rff(0x53, 0xca))

#print(hex(getRconN(5)))

#for i in range(1, 11):
#    print(hex(getRconN(i)))
    
#print(hex(sbox(16)))